useEffect, срабатывает после каждого рендера компонента

он не сработает сразу после App инициализации
но после полного return

У него есть массив зависимостей []
useEffect(() => {
  // code
  });
}, []);

если этот массив меняется то useEffect перезапустится

useEffect(() => {
  // code
  });
}, []);  - такой код сработает только один раз, после первого запуска
App компонента

// ==========================
useEffect не стоит употреблять без надобности, потому-что он запускается
после render компонента

// ==========================
useEffect(() => {
  if (open) {
    dialog.current.showModal();
  } else {
    dialog.current.close();
  }
}, [open]);

такой код будет срабатывать каждый раз когда меняется значение open,
например было true стало false и наоборот

// ===================================
useEffect(() => {
  const timer = setTimeout(() => {
    onConfirm();
  }, 3000);

  return () => { // функция очистки
    clearTimeout(timer);
  }
}, []);

Монтирование компонента: Это процесс, когда компонент впервые добавляется в DOM (Document Object Model) — то есть, когда он появляется на странице. В этот момент React "монтирует" компонент, и код внутри useEffect выполняется

[]  - больше не будет вызываться, даже если компонент будет перерисовываться (то есть, когда его состояние изменится или будут переданы новые пропсы

Если компонент будет размонтирован (удален из DOM), функция очистки (возвращаемая useEffect) будет вызвана. В вашем примере это clearTimeout, который предотвращает выполнение onConfirm, если компонент исчезнет до истечения 3 секунд.

{showComponent && <MyComponent />} - это пример когда добавляется елемент в DOM , а когда showComponent становится false тогда <MyComponent /> удаляется из DOM и срабатывает функция очистки

функция очистки работает при удалении компонента из DOM и перед каждым новым вызовом эффекта, если его зависимости изменились.

Тоесть если [exml] - масиив не пустой и значение в нем меняется, то будет вызвана функция очистки, а потом остальной код в useEffect